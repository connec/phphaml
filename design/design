[Parsing Architecture]

	Problem:
		Currently, handlers fulfill the intended roll of 'parser helpers' as well as the roll of nodes, this
		will surely mean storing unescessary information in parse caches.
		
		How about:
			Cut node-like functionality from handlers.  Have a handler parse the line and generate an
			appropriate node to be added to the parse tree.
			
			Problem:
				Want to keep everything DRY, need to automate common functionality but allow divergance.


[Design of PHP Handler]

	Problem:
		The PHP handler has to 'parse', store and 'render' any arbitrary PHP code and maintain state of
		any assignments or variable changes.  It must also be capable of dealing with control structures.
		
		How about:
			The node simply stores the contents of the PHP line.
			
			The parsing stage detects if an assignment of some sort occurs (quote safe search for =) and 
			records if it does, also checks if it's a control structure and records if so and which type.
			
			The rendering stage executes the control structure with the children's render result and returns
			the result.
		
		How about:
			Use one PhpHandler per whole control structure, overriding handle() and add_child() to correctly
			store all relevant data. E.g.:
			
			[PhpHandler]
				content: [control structure type, e.g. "if"]
				children: [relevant structure for each control structure, mostly just a single array however
				           "if" structures would probably want something like
				           array('if' => array(), 'elseif' => array()...) etc.]
			
			This should make the rendering fairly simple.
			
			Problem:
				The 'children' structure could become very complicated.